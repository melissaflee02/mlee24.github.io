webpackHotUpdate("main",{

/***/ "./src/stories/website/Toggle/Toggle.stories.jsx":
/*!*******************************************************!*\
  !*** ./src/stories/website/Toggle/Toggle.stories.jsx ***!
  \*******************************************************/
/*! exports provided: default, Base */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(__react_refresh_utils__, __react_refresh_error_overlay__) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return Base; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ "./src/stories/website/Toggle/index.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");
__webpack_require__.$Refresh$.setup(module.i);

var _jsxFileName = "/Users/melissalee/melissaflee02.github.io/myapp/src/stories/website/Toggle/Toggle.stories.jsx",
    _s = __webpack_require__.$Refresh$.signature();

/* eslint-disable */
// @ts-nocheck
// @ts-ignore
var __STORY__ = "import * as React from 'react'\nimport { useState } from 'react'\n\nimport { Toggle } from '.'\n\nexport default {\n  title: 'website/Toggle',\n  component: Toggle,\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n}\n\nexport const Base = () => {\n  const [mode, setMode] = useState(false);\n\n  const onModeChange = (checked) => {\n    setMode(checked);\n  }\n\n  return (\n    <Toggle id=\"display_mode\" name=\"display_mode\" isChecked={mode} onChange={ onModeChange } isSmall />\n  )\n}\n"; // @ts-ignore

var __LOCATIONS_MAP__ = {
  "Base": {
    "startLoc": {
      "col": 20,
      "line": 14
    },
    "endLoc": {
      "col": 1,
      "line": 24
    },
    "startBody": {
      "col": 20,
      "line": 14
    },
    "endBody": {
      "col": 1,
      "line": 24
    }
  }
};




/* harmony default export */ __webpack_exports__["default"] = ({
  title: 'website/Toggle',
  component: ___WEBPACK_IMPORTED_MODULE_1__[/* Toggle */ "a"],
  argTypes: {
    backgroundColor: {
      control: 'color'
    }
  }
});
const Base = () => {
  _s();

  const [mode, setMode] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);

  const onModeChange = checked => {
    setMode(checked);
  };

  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__["jsxDEV"])(___WEBPACK_IMPORTED_MODULE_1__[/* Toggle */ "a"], {
    id: "display_mode",
    name: "display_mode",
    isChecked: mode,
    onChange: onModeChange,
    isSmall: true
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 30,
    columnNumber: 5
  }, undefined);
};

_s(Base, "FYoO5Hqoux0s5UkcGhUzSLzYeI4=");

_c = Base;
Base.parameters = {
  storySource: {
    source: "() => {\n  const [mode, setMode] = useState(false);\n\n  const onModeChange = (checked) => {\n    setMode(checked);\n  }\n\n  return (\n    <Toggle id=\"display_mode\" name=\"display_mode\" isChecked={mode} onChange={ onModeChange } isSmall />\n  )\n}"
  },
  ...Base.parameters
};

var _c;

__webpack_require__.$Refresh$.register(_c, "Base");
Base.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Base"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/stories/website/Toggle/Toggle.stories.jsx"] = {
    name: "Base",
    docgenInfo: Base.__docgenInfo,
    path: "src/stories/website/Toggle/Toggle.stories.jsx"
  };
}

const currentExports = __react_refresh_utils__.getModuleExports(module.i);
__react_refresh_utils__.registerExportsForReactRefresh(currentExports, module.i);

if (true) {
  const isHotUpdate = !!module.hot.data;
  const prevExports = isHotUpdate ? module.hot.data.prevExports : null;

  if (__react_refresh_utils__.isReactRefreshBoundary(currentExports)) {
    module.hot.dispose(
      /**
       * A callback to performs a full refresh if React has unrecoverable errors,
       * and also caches the to-be-disposed module.
       * @param {*} data A hot module data object from Webpack HMR.
       * @returns {void}
       */
      function hotDisposeCallback(data) {
        // We have to mutate the data object to get data registered and cached
        data.prevExports = currentExports;
      }
    );
    module.hot.accept(
      /**
       * An error handler to allow self-recovering behaviours.
       * @param {Error} error An error occurred during evaluation of a module.
       * @returns {void}
       */
      function hotErrorHandler(error) {
        if (
          typeof __react_refresh_error_overlay__ !== 'undefined' &&
          __react_refresh_error_overlay__
        ) {
          __react_refresh_error_overlay__.handleRuntimeError(error);
        }

        if (typeof __react_refresh_test__ !== 'undefined' && __react_refresh_test__) {
          if (window.onHotAcceptError) {
            window.onHotAcceptError(error.message);
          }
        }

        __webpack_require__.c[module.i].hot.accept(hotErrorHandler);
      }
    );

    if (isHotUpdate) {
      if (
        __react_refresh_utils__.isReactRefreshBoundary(prevExports) &&
        __react_refresh_utils__.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)
      ) {
        module.hot.invalidate();
      } else {
        __react_refresh_utils__.enqueueUpdate(
          /**
           * A function to dismiss the error overlay after performing React refresh.
           * @returns {void}
           */
          function updateCallback() {
            if (
              typeof __react_refresh_error_overlay__ !== 'undefined' &&
              __react_refresh_error_overlay__
            ) {
              __react_refresh_error_overlay__.clearRuntimeErrors();
            }
          }
        );
      }
    }
  } else {
    if (isHotUpdate && __react_refresh_utils__.isReactRefreshBoundary(prevExports)) {
      module.hot.invalidate();
    }
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js"), __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js")))

/***/ })

})
//# sourceMappingURL=main.c0a84daa43c828e549d4.hot-update.js.map